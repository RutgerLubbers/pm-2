# -*- mode: ruby -*-
# vi: set ft=ruby :
module OS
    def OS.windows?
        (/cygwin|mswin|mingw|bccwin|wince|emx/ =~ RUBY_PLATFORM) != nil
    end

    def OS.mac?
        (/darwin/ =~ RUBY_PLATFORM) != nil
    end

    def OS.unix?
        !OS.windows?
    end

    def OS.linux?
        OS.unix? and not OS.mac?
    end
end

# Function to check whether VM was already provisioned
def provisioned?(vm_name='default', provider='virtualbox')
  File.exist?(".vagrant/machines/#{vm_name}/#{provider}/action_provision")
end

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "bento/ubuntu-18.04"
  config.vm.box_version = "201812.27.0"
  config.vm.hostname = "pm2"

  # if the machine is not yet provisioned, do not try to update the vbox
  # guest additions, because provisioning will fail
  config.vbguest.auto_update = false if not provisioned?

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false


  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", type: "dhcp"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.

  # MariaDB
  config.vm.network "forwarded_port", guest: 3306, host: 3306

  # Apache
  config.vm.network "forwarded_port", guest: 8888, host: 8888

  #
  # Kafka
  #

  # Kafka - Zookeeper
  config.vm.network "forwarded_port", guest: 2181, host: 2181

  # Kafka brokers
  config.vm.network "forwarded_port", guest: 19092, host: 19092
  config.vm.network "forwarded_port", guest: 29092, host: 29092
  config.vm.network "forwarded_port", guest: 39092, host: 39092

  #
  # End of Kafka ports
  #

  # Mongodb
  config.vm.network "forwarded_port", guest: 27017, host: 27017

  #
  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.

  config.vm.synced_folder "installers", "/installers"
  config.vm.synced_folder "upgrades", "/upgrades"

  config.vm.synced_folder "..",
		"/opt/power-meter",
		type: "nfs",
		mount_options: [ "nolock", "fsc" ]

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # set VirtualBox to sync the time inside the guest when it drifts for more than 5 seconds (default is 20 minutes, SRSLY??)
    vb.customize [ "guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-set-threshold", 5000 ]

    # Set VirtualBox to not use sound or microphone (no audio in/out).
    vb.customize [ "modifyvm", :id, "--audio", "null", "--audioin", "off", "--audioout", "off"]

    # Display the VirtualBox GUI when booting the machine
    # vb.gui = true

    # Customize the amount of memory on the VM:
    vb.memory = "1024"
    vb.cpus = 2
    vb.name = "pm2"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", privileged: true, path: "provisioning/provision.sh", env: { "VAGRANT_PROVISION" => "true"  }

  # for some reason, apache refuses to start on boot (probably because of nfs mount?), start it manually here
  # config.vm.provision "shell", inline: "sleep 10; service apache2 start", run: "always"
end
