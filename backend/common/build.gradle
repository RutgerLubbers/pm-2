buildscript {
    ext {
        gradleCredentionalsVersion = "1.0.4"
    }
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/plugins-release" }
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://oss.sonatype.org/content/repositories/snapshots" }
    }
    dependencies {
        classpath "ru.vyarus:gradle-quality-plugin:2.3.0"
    }
}

group = "nl.hoepsch"

version '1.0-SNAPSHOT'

apply plugin: "java"
apply plugin: "idea"
apply plugin: "maven"
apply plugin: "ru.vyarus.quality"

def currentJvm = org.gradle.internal.jvm.Jvm.current()
println "Using Java '" + currentJvm + "'."

ext {
    javaVersion = "1.10"
    kafkaVersion = "2.1.0"

    jacksonVersion = "2.9.4"
    springBootVersion = "2.1.1.RELEASE"
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
    maven { url "http://repo.spring.io/milestone" }
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {

    compile "org.springframework.boot:spring-boot-starter:${springBootVersion}"
    compile "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"

    compile "ch.qos.logback:logback-classic:1.2.3"

    compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"


    compile "org.apache.kafka:kafka-clients:${kafkaVersion}"
    compile "commons-logging:commons-logging:1.2"

    compile "org.mongodb:mongodb-driver:3.6.3"

}

tasks.withType(JavaCompile) {
    options.deprecation = true
    options.encoding = "UTF-8"
    // add Xlint to our compiler options (but disable processing because of Spring warnings in code)
    // and make warnings be treated like errors
    options.compilerArgs += ["-Xlint:all", "-Xlint:-processing", "-Werror"]
}

quality {
    configDir = "${rootProject.projectDir}/src/quality/config/"
}


