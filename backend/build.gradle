/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */
buildscript {
    ext {
        springBootVersion = "2.1.3.RELEASE"
        springLoadedVersion = "1.2.8.RELEASE"
    }
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/plugins-release" }
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://oss.sonatype.org/content/repositories/snapshots" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.springframework:springloaded:${springLoadedVersion}"
        classpath "com.commercehub.gradle.plugin:gradle-avro-plugin:0.15.1"
        classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.7.1"
    }
}

ext {
    javaVersion = "1.11"

    commonsLangVersion = "3.9"

    springPlatformVersion = "Brussels-SR5"
    springBootVersion = "2.1.3.RELEASE"

    avroVersion = "1.8.2"
    springKafkaVersion = "2.2.5.RELEASE"
    kafkaVersion = "2.2.0"
    kafkaAvroVersion = "5.0.0"

    jacksonVersion = "2.9.4"

    mapStructVersion = "1.3.0.Final"

    pmdToolVersion = "5.5.3"
    checkstyleVersion = '8.18'
    sevntuChecksVersion = '1.32.0'

    SpotBugsTask = com.github.spotbugs.SpotBugsTask
}

configure(allprojects) { project ->

    group = "nl.hoepsch.pm"
    version = rootProject.version

    apply plugin: "java"
    apply plugin: 'groovy'
    apply plugin: "io.spring.dependency-management"
    apply plugin: "idea"
    apply plugin: "checkstyle"
    apply plugin: "com.github.spotbugs"
    apply plugin: "pmd"
//    apply plugin: "distribution"

    sourceCompatibility = 1.11
    targetCompatibility = 1.11

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://oss.sonatype.org/content/repositories/snapshots" }
    }

    dependencyManagement {
        imports {
            mavenBom "io.spring.platform:platform-bom:${springPlatformVersion}"
            mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
        }
    }

    configurations {
        compile {
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
            exclude group: 'log4j', module: 'log4j'
        }
    }


    dependencies {
        // <Spring Context>
        compileOnly "org.springframework:spring-context"
        // </Spring Context>

        // <Commons>
        compileOnly "org.apache.commons:commons-lang3:${commonsLangVersion}"
        // </Commons>

        // <Logback>
        compile "ch.qos.logback:logback-classic:1.2.3"
        // </Logback>

        // <MapStruct>
        compile "org.mapstruct:mapstruct-jdk8:${mapStructVersion}"
        annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
        // </MapStruct>

        // <SpotBugs>
        compileOnly("com.github.spotbugs:spotbugs-annotations:3.1.8")
        // <//SpotBugs>

        // <CheckStyle>
        checkstyle "com.puppycrawl.tools:checkstyle:${checkstyleVersion}"
        checkstyle "com.github.sevntu-checkstyle:sevntu-checks:${sevntuChecksVersion}"
        // </CheckStyle>

        // https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api
        compile("javax.annotation:javax.annotation-api:1.3.2")

    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    tasks.withType(JavaCompile) {
        options.deprecation = true
        options.encoding = 'UTF-8'
        options.compilerArgs += [
            '-Xlint:all',
            '-Xlint:-processing',
            '-Werror',
            '-Amapstruct.defaultComponentModel=spring'
        ]
    }

    checkstyle {
        configDir = file("${rootProject.projectDir}/src/quality/config/checkstyle")
        ignoreFailures = false
        sourceSets = [sourceSets.main]
        toolVersion = "${checkstyleVersion}"
    }

    pmd {
        pmdMain.exclude '**/catalogue/model/v1_0/*'
        ignoreFailures = false
        consoleOutput = true
        ruleSetFiles = files("${rootProject.projectDir}/src/quality/config/pmd/pmd.xml")
        ruleSets = [] // https://github.com/pmd/pmd/issues/876
        sourceSets = [sourceSets.main]
        toolVersion = "6.10.0"
    }

    spotbugs {
        spotbugsMain.exclude '**/catalogue/model/v1_0/*'
        excludeFilter = file("${rootProject.projectDir}/src/quality/config/spotbugs/exclude.xml")
        ignoreFailures = false
        sourceSets = [sourceSets.main]
        toolVersion = "3.1.11"
    }


    tasks.withType(SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }
}
